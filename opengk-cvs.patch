diff -Nur opengk-1.13.5/main.cxx opengk/main.cxx
--- opengk-1.13.5/main.cxx	2003-04-02 09:06:17.000000000 +0200
+++ opengk/main.cxx	2005-03-11 01:20:27.000000000 +0100
@@ -8,6 +8,28 @@
  * Copyright 2001 Equivalence
  *
  * $Log$
+ * Revision 1.39  2005/03/11 00:20:27  csoutheren
+ * Fixed problem when compiling without H.501 support
+ *
+ * Revision 1.38  2004/12/18 03:41:33  rjongbloed
+ * Fixed being able to compile without OSP library
+ *
+ * Revision 1.37  2004/12/16 00:47:55  csoutheren
+ * Added incoming call functions
+ *
+ * Revision 1.36  2004/12/15 06:29:53  csoutheren
+ * Added OSP support
+ *
+ * Revision 1.35  2004/12/14 11:15:56  rjongbloed
+ * Added extra parameter to TranslateAliasAddress for OSP support
+ *
+ * Revision 1.34  2004/08/15 07:19:26  rjongbloed
+ * Fixed compatibility with gkserver changes
+ *
+ * Revision 1.33  2004/05/03 13:25:46  rjongbloed
+ * Converted everything to be codec plug in freindly
+ * Removed GSM and G.729 as now plug ins are "the way"!
+ *
  * Revision 1.32  2003/04/02 07:06:17  robertj
  * Added support for (optional) duplicate aliases.
  *
@@ -119,10 +141,12 @@
 #include "main.h"
 #include "custom.h"
 
-#include <gsmcodec.h>
-
 #include <ptclib/random.h>
 
+#ifdef H323_TRANSNEXUS_OSP
+#include <opalosp.h>
+#endif
+
 //#define TEST_TOKEN
 
 PCREATE_PROCESS(OpenGk);
@@ -157,6 +181,13 @@
 static const char ClearingHouseKey[] = "H501 Clearing House";
 static const char H501InterfaceKey[] = "H501 Interface";
 
+#ifdef H323_TRANSNEXUS_OSP
+static const char OSPRoutingURLKey[] = "OSP Routing URL";
+static const char OSPPrivateKeyFileKey[] = "OSP Private Key";
+static const char OSPPublicKeyFileKey[] = "OSP Public Key";
+static const char OSPServerKeyFileKey[] = "OSP Server Key";
+#endif
+
 #define GATEWAY_LISTENERS_SECTION     "Gateway Listeners"
 #define GATEKEEPER_LISTENERS_SECTION  "Gatekeeper Listeners"
 #define LISTENER_INTERFACE_KEY        "Interface"
@@ -597,9 +628,9 @@
 
   // Set up software codecs.
   if (capabilities.GetSize() == 0) {
-    SetCapability(0, 0, new H323_GSM0610Capability);
-    SetCapability(0, 0, new H323_G711Capability(H323_G711Capability::muLaw));
-    SetCapability(0, 0, new H323_G711Capability(H323_G711Capability::ALaw));
+    AddAllCapabilities(0, 0, OpalGSM0610);
+    AddAllCapabilities(0, 0, OpalG711uLaw);
+    AddAllCapabilities(0, 0, OpalG711ALaw);
 
     H323_UserInputCapability::AddAllCapabilities(capabilities, 0, 1);
     PSYSTEMLOG(Info, "Main\tCodecs (in preference order):\n" << setprecision(2) << capabilities);
@@ -648,6 +679,9 @@
   : H323GatekeeperServer(ep),
     endpoint(ep)
 {
+#ifdef H323_TRANSNEXUS_OSP
+  ospProvider = NULL;
+#endif
 }
 
 
@@ -657,6 +691,8 @@
 
   PWaitAndSignal mutex(reconfigurationMutex);
 
+#ifdef H323_H501
+
   // set clearing house address
   PString clearingHouse = cfg.GetString(ClearingHouseKey);
   rsrc->Add(new PHTTPStringField(ClearingHouseKey, 25, clearingHouse));
@@ -673,6 +709,47 @@
       PSYSTEMLOG(Error, "Main\tCould not open clearing house at: " << clearingHouse);
     }
   }
+#endif
+
+#ifdef H323_TRANSNEXUS_OSP
+  PString oldOSPServer = ospRoutingURL;
+  ospRoutingURL = cfg.GetString(OSPRoutingURLKey, ospRoutingURL);
+  rsrc->Add(new PHTTPStringField(OSPRoutingURLKey, 25, ospRoutingURL));
+  BOOL ospChanged = oldOSPServer != ospRoutingURL;
+
+  ospPrivateKeyFileName = cfg.GetString(OSPPrivateKeyFileKey, ospPrivateKeyFileName);
+  rsrc->Add(new PHTTPStringField(OSPPrivateKeyFileKey, 25, ospPrivateKeyFileName));
+
+  ospPublicKeyFileName = cfg.GetString(OSPPublicKeyFileKey, ospPublicKeyFileName);
+  rsrc->Add(new PHTTPStringField(OSPPublicKeyFileKey, 25, ospPublicKeyFileName));
+
+  ospServerKeyFileName = cfg.GetString(OSPServerKeyFileKey, ospServerKeyFileName);
+  rsrc->Add(new PHTTPStringField(OSPServerKeyFileKey, 25, ospServerKeyFileName));
+
+  if (!ospRoutingURL.IsEmpty()) {
+    if (ospProvider != NULL && ospProvider->IsOpen() && ospChanged) {
+      delete ospProvider;
+      ospProvider = NULL;
+    }
+    ospProvider = new OpalOSP::Provider();
+    int status;
+    if (ospPrivateKeyFileName.IsEmpty() && ospPublicKeyFileName.IsEmpty() && ospServerKeyFileName.IsEmpty())
+      status = ospProvider->Open(ospRoutingURL);
+    else
+      status = ospProvider->Open(ospRoutingURL, ospPrivateKeyFileName, ospPublicKeyFileName, ospServerKeyFileName);
+    if (status != 0) {
+      delete ospProvider;
+      ospProvider = NULL;
+    }
+  } 
+  
+  else if (ospProvider != NULL) {
+    ospProvider->Close();
+    delete ospProvider;
+    ospProvider = NULL;
+  }
+
+#endif
 
   PString gkid = cfg.GetString(GatekeeperIdentifierKey, OpenGk::Current().GetName() + " on " + PIPSocket::GetHostName());
   rsrc->Add(new PHTTPStringField(GatekeeperIdentifierKey, 25, gkid));
@@ -771,9 +848,18 @@
 
 BOOL MyGatekeeperServer::TranslateAliasAddress(const H225_AliasAddress & alias,
                                                H225_ArrayOf_AliasAddress & aliases,
-                                               H323TransportAddress & address)
-{
-  if (H323GatekeeperServer::TranslateAliasAddress(alias, aliases, address))
+                                               H323TransportAddress & address,
+                                               BOOL & isGkRouted,
+                                               H323GatekeeperCall * call)
+{
+#ifdef H323_TRANSNEXUS_OSP
+  if (ospProvider != NULL) {
+    address = "127.0.0.1";
+    return TRUE;
+  }
+#endif
+
+  if (H323GatekeeperServer::TranslateAliasAddress(alias, aliases, address, isGkRouted /* FFU: , call */))
     return TRUE;
 
   PString aliasString = H323GetAliasAddressString(alias);
@@ -786,7 +872,7 @@
     if (routes[i].IsMatch(aliasString)) {
       address = routes[i].GetHost();
       PTRACE(3, "Translated \"" << aliasString << "\" to " << address);
-      return TRUE;
+      break;
     }
   }
 
@@ -828,8 +914,158 @@
                                    Direction dir)
   : H323GatekeeperCall(gk, id, dir)
 {
+#ifdef H323_TRANSNEXUS_OSP
+  ospTransaction = NULL;
+#endif
+}
+
+#ifdef H323_TRANSNEXUS_OSP
+static BOOL GetE164Alias(const H225_ArrayOf_AliasAddress & aliases, H225_AliasAddress & destAlias)
+{
+  PINDEX i;
+  for (i = 0; i < aliases.GetSize(); ++i) {
+    if (aliases[i].GetTag() == H225_AliasAddress::e_dialedDigits) {
+      destAlias = aliases[i];
+      return TRUE;
+    }
+  }
+  return FALSE;
+}
+
+BOOL MyGatekeeperCall::AuthoriseOSPCall(H323GatekeeperARQ & info)
+{
+  int result;
+
+  // if making call, authorise the call and insert the token
+  if (!info.arq.m_answerCall) {
+
+    OpalOSP::Transaction::AuthorisationInfo authInfo;
+
+    // get the source call signalling address
+    if (info.arq.HasOptionalField(H225_AdmissionRequest::e_srcCallSignalAddress))
+      authInfo.ospvSource = OpalOSP::TransportAddressToOSPString(info.arq.m_srcCallSignalAddress);
+    else
+      authInfo.ospvSource = OpalOSP::TransportAddressToOSPString(info.endpoint->GetSignalAddress(0));
+
+    // get the source number
+    if (!GetE164Alias(info.arq.m_srcInfo, authInfo.callingNumber)) {
+      PTRACE(1, "OSP\tNo E164 source address in ARQ");
+      info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_incompleteAddress);
+      return FALSE;
+    }
+
+    // get the dest number
+    if (!info.arq.HasOptionalField(H225_AdmissionRequest::e_destinationInfo)) {
+      PTRACE(1, "OSP\tNo dest aliases in ARQ");
+      info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_incompleteAddress);
+      return FALSE;
+    }
+    if (!GetE164Alias(info.arq.m_destinationInfo, authInfo.calledNumber)) {
+      PTRACE(1, "OSP\tNo E164 source address in ARQ");
+      info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_incompleteAddress);
+      return FALSE;
+    }
+
+    // get the call ID
+    authInfo.callID           = this->GetCallIdentifier();
+
+    // authorise the call
+    unsigned numberOfDestinations = 1;
+    if ((result = ospTransaction->Authorise(authInfo, numberOfDestinations)) != 0) {
+      PTRACE(1, "OSP\tCannot authorise ARQ - result = " << result);
+      info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_incompleteAddress);
+      return FALSE;
+    } 
+    if (numberOfDestinations == 0) {
+      PTRACE(1, "OSP\tNo destinations available");
+      info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_noRouteToDestination);
+      return FALSE;
+    }
+
+    // get the destination
+    OpalOSP::Transaction::DestinationInfo destInfo;
+    if ((result = ospTransaction->GetFirstDestination(destInfo)) != 0) {
+      PTRACE(1, "OSP\tCannot get first destination - result = " << result);
+      info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_undefinedReason);
+      return FALSE;
+    } 
+
+    // insert destination into the ACF
+    if (!destInfo.Insert(info.acf)) {
+      PTRACE(1, "OSP\tCannot insert information info ACF");
+      info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_undefinedReason);
+      return FALSE;
+    }
+
+    PTRACE(4, "OSP routed call to " << destInfo.calledNumber << "@" << destInfo.destinationAddress);
+    return TRUE;
+  }
+
+  // if answering call, validate the token
+  OpalOSP::Transaction::ValidationInfo valInfo;
+
+  // get the token
+  if (!info.arq.HasOptionalField(H225_AdmissionRequest::e_tokens) || 
+     !valInfo.ExtractToken(info.arq.m_tokens)) {
+    PTRACE(1, "OSP\tNo tokens in in ARQ");
+    info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_invalidPermission);
+    return FALSE;
+  }
+
+  // get the source call signalling address
+  if (info.arq.HasOptionalField(H225_AdmissionRequest::e_srcCallSignalAddress))
+    valInfo.ospvSource = OpalOSP::TransportAddressToOSPString(info.arq.m_srcCallSignalAddress);
+  else
+    valInfo.ospvSource = OpalOSP::TransportAddressToOSPString(info.endpoint->GetSignalAddress(0));
+
+  // get the dest call signalling address
+  if (info.arq.HasOptionalField(H225_AdmissionRequest::e_destCallSignalAddress))
+    valInfo.ospvDest = OpalOSP::TransportAddressToOSPString(info.arq.m_destCallSignalAddress);
+  else
+    valInfo.ospvDest = OpalOSP::TransportAddressToOSPString(info.endpoint->GetSignalAddress(0));
+
+  // get the source number
+  if (!GetE164Alias(info.arq.m_srcInfo, valInfo.callingNumber)) {
+    PTRACE(1, "OSP\tNo E164 source address in ARQ");
+    info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_incompleteAddress);
+    return FALSE;
+  }
+
+  // get the dest number
+  if (!info.arq.HasOptionalField(H225_AdmissionRequest::e_destinationInfo)) {
+    PTRACE(1, "OSP\tNo dest aliases in ARQ");
+    info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_incompleteAddress);
+    return FALSE;
+  }
+  if (!GetE164Alias(info.arq.m_destinationInfo, valInfo.calledNumber)) {
+    PTRACE(1, "OSP\tNo E164 source address in ARQ");
+    info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_incompleteAddress);
+    return FALSE;
+  }
+
+  // get the call ID
+  valInfo.callID = this->GetCallIdentifier();
+
+  // validate the token
+  BOOL authorised;
+  unsigned timeLimit;
+  if ((result = ospTransaction->Validate(valInfo, authorised, timeLimit)) != 0) {
+    PTRACE(1, "OSP\tCannot validate ARQ - result = " << result);
+    info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_invalidPermission);
+    return FALSE;
+  }
+
+  if (!authorised) {
+    PTRACE(1, "OSP\tCall not authorised");
+    info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_requestDenied);
+    return FALSE;
+  }
+
+  PTRACE(4, "OSP authorised call with time limit of " << timeLimit);
+  return TRUE;
 }
 
+#endif
 
 H323GatekeeperRequest::Response MyGatekeeperCall::OnAdmission(H323GatekeeperARQ & info)
 {
@@ -843,11 +1079,52 @@
 #endif
 
   // need to add RIP as clearing house may be involved
-  if (info.IsFastResponseRequired())
+  if (info.IsFastResponseRequired()) {
+    if (H323GatekeeperCall::OnAdmission(info) == H323GatekeeperRequest::Reject)
+      return H323GatekeeperRequest::Reject;
     return H323GatekeeperRequest::InProgress(30000);
+  }
+
+#ifdef H323_TRANSNEXUS_OSP
+  OpalOSP::Provider * ospProvider = ((MyGatekeeperServer &)gatekeeper).GetOSPProvider();
+  if (ospProvider != NULL) {
+    ospTransaction = new OpalOSP::Transaction();
+    {
+      int result;
+      if ((result = ospTransaction->Open(*ospProvider)) != 0) {
+        delete ospTransaction;
+        ospTransaction = NULL;
+        PTRACE(1, "OSP\tCannot open transaction - result = " << result);
+        info.arj.m_rejectReason.SetTag(H225_AdmissionRejectReason::e_exceedsCallCapacity);
+        return H323GatekeeperRequest::Reject;
+      }
+    }
+    if (!AuthoriseOSPCall(info)) {
+      delete ospTransaction;
+      ospTransaction = NULL;
+      return H323GatekeeperRequest::Reject;
+    }
+    return H323GatekeeperRequest::Confirm;
+  } else
+#endif
 
   return H323GatekeeperCall::OnAdmission(info);
 }
 
 
+MyGatekeeperCall::~MyGatekeeperCall()
+{
+#ifdef H323_TRANSNEXUS_OSP
+  if (ospTransaction != NULL) {
+    ospTransaction->SetEndReason(callEndReason);
+    PTimeInterval duration;
+    if (connectedTime.GetTimeInSeconds() != 0 && callEndTime.GetTimeInSeconds() != 0)
+      duration = callEndTime - connectedTime;
+    ospTransaction->CallEnd(callEndTime.GetTimeInSeconds());
+    delete ospTransaction;
+  }
+#endif
+}
+
+
 // End of File ///////////////////////////////////////////////////////////////
diff -Nur opengk-1.13.5/main.h opengk/main.h
--- opengk-1.13.5/main.h	2003-04-02 08:13:02.000000000 +0200
+++ opengk/main.h	2004-12-15 07:29:53.000000000 +0100
@@ -6,6 +6,15 @@
  * Copyright 2001 Equivalence Pty. Ltd.
  *
  * $Log$
+ * Revision 1.13  2004/12/15 06:29:53  csoutheren
+ * Added OSP support
+ *
+ * Revision 1.12  2004/12/14 11:15:56  rjongbloed
+ * Added extra parameter to TranslateAliasAddress for OSP support
+ *
+ * Revision 1.11  2004/08/15 07:19:26  rjongbloed
+ * Fixed compatibility with gkserver changes
+ *
  * Revision 1.10  2003/04/02 06:13:02  robertj
  * Added H.323 Annex G Peer Element support to gatekeeper server.
  *
@@ -58,17 +67,23 @@
 
 class MyGatekeeperCall : public H323GatekeeperCall
 {
-    PCLASSINFO(MyGatekeeperCall, H323GatekeeperCall);
+  PCLASSINFO(MyGatekeeperCall, H323GatekeeperCall);
   public:
     MyGatekeeperCall(
       MyGatekeeperServer & server,
       const OpalGloballyUniqueID & callIdentifier, /// Unique call identifier
       Direction direction
     );
+    ~MyGatekeeperCall();
 
     virtual H323GatekeeperRequest::Response OnAdmission(
       H323GatekeeperARQ & request
     );
+
+#ifdef H323_TRANSNEXUS_OSP
+    BOOL AuthoriseOSPCall(H323GatekeeperARQ & info);
+    OpalOSP::Transaction * ospTransaction;
+#endif
 };
 
 
@@ -87,12 +102,19 @@
     virtual BOOL TranslateAliasAddress(
       const H225_AliasAddress & alias,
       H225_ArrayOf_AliasAddress & aliases,
-      H323TransportAddress & address
+      H323TransportAddress & address,
+      BOOL & isGkRouted,
+      H323GatekeeperCall * call
     );
 
     // new functions
     BOOL Initialise(PConfig & cfg, PConfigPage * rsrc);
 
+#ifdef H323_TRANSNEXUS_OSP
+    OpalOSP::Provider * GetOSPProvider() const
+    { return ospProvider; }
+#endif
+
   private:
     MyEndPoint & endpoint;
 
@@ -127,6 +149,14 @@
     PList<RouteMap> routes;
 
     PMutex reconfigurationMutex;
+
+#ifdef H323_TRANSNEXUS_OSP
+    OpalOSP::Provider * ospProvider;
+    PString ospRoutingURL;
+    PString ospPrivateKeyFileName;
+    PString ospPublicKeyFileName;
+    PString ospServerKeyFileName;
+#endif
 };
 
 
diff -Nur opengk-1.13.5/version.h opengk/version.h
--- opengk-1.13.5/version.h	2003-06-06 08:11:30.000000000 +0200
+++ opengk/version.h	2005-03-11 01:21:54.000000000 +0100
@@ -27,8 +27,6 @@
  *
  * Library dependencies:
  *
- *   pwlib: v1.5.0   CVS tag:
- *   openh323: v1.12.0   CVS tag: v1_12_0
  */
 
 #ifndef _OpenGK_VERSION_H
@@ -37,7 +35,7 @@
 #define MAJOR_VERSION 1
 #define MINOR_VERSION 4
 #define BUILD_TYPE    ReleaseCode
-#define BUILD_NUMBER 1
+#define BUILD_NUMBER 2
 
 
 #endif  // _OpenGK_VERSION_H
